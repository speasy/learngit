" required
filetype off                  
filetype plugin indent on
"关闭兼容模式
set nocompatible
let $LANG = 'en'
set langmenu=en
"模仿快捷键 如ctrl+A ctrl+C ...
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin
set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

"===========================================
"后加入配置
"===========================================
"===========
"编码问题
"===========
"gvim内部编码
set encoding=utf-8
"当前编辑的文件编码
set fileencoding=utf-8
"gvim打开支持编码的文件
set fileencodings=ucs-bom,utf-8,gbk,cp936,gb2312,big5,euc-jp,euc-kr,latin1
"设置当编码为UTF-8时不要插入bom(byte order mark) 字节顺序标志,也叫utf-8标签
set nobomb
"解决console输出乱码
language messages zh_CN.utf-8
"解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
"设置终端编码为gvim内部编码encoding
let &termencoding=&encoding

" ===================================================================
" 图形界面
" ====================================================================
"常规模式下输入 cS 清除行尾空格
nmap cS :%s/\s\+$//g<CR>:noh<CR>
"常规模式下输入 cM 清除行尾 ^M 符号
nmap cM :%s/\r$//g<CR>:noh<CR>
"TxtBrowser 高亮TXT文本文件
au BufRead,BufNewFile * setfiletype txt
"防止特殊符号无法正常显示
set ambiwidth=double
"启动的时候不显示那个援助索马里儿童的提示
set shortmess=atI
"缩进尺寸为4个字符
set sw=4
"编辑时将所有tab替换为空格
set et
"tab宽度为4个字符
set ts=4
"设定 << 和 >> 命令移动时的宽度为 4
set shiftwidth=4
set noexpandtab
set autowrite
set display=lastline

"自动换行
set wrap
"光标从行首和行末时可以跳到另一行去
set whichwrap=b,s,<,>,[,]
"为不同的文件采取不同的缩进
set autoindent
set smartindent
"只在行首用tab，其他地方的tab都用空格代替
set smarttab
set cindent
set linebreak
set shiftround

"不生成备份文件
set nobackup
"保存文件前建立备份，保存成功后删除该备份
set writebackup
"不要备份swp文件
set noswapfile
"光标取消闪动
set gcr=a:blinkon0
"开启行号标记
set number
"设置命令行(最底下)的高度为2，默认为1
set cmdheight=1
set ch=1
set stl=\ [File]\ %F%m%r%h%y[%{&fileformat},%{&fileencoding}]\ %w\ \ [PWD]\ %r%{GetPWD()}%h\ %=\ [Line]%l/%L\ %=\[%P]

"始终显示状态行
set ls=1 
"命令行补全以增强模式运行
set wildmenu
"光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3
"默认窗口大小
set lines=21 columns=72

"全屏
if has("gui_running")
	"au GUIEnter * simalt ~x " 窗口启动时自动最大化 
	set go=
	set showtabline=0 " 隐藏Tab栏 
	set guioptions-=m " 隐藏菜单栏 
	set guioptions-=T " 隐藏工具栏 
	set guioptions-=b " 隐藏底部滚动条 
	set guioptions+=r " 开启右侧滚动条
endif

map <silent> <F3> :if &guioptions =~# 'T' <Bar>
        \set guioptions-=T <Bar>
        \set guioptions-=m <bar>
    \else <Bar>
        \set guioptions+=T <Bar>
        \set guioptions+=m <Bar>
    \endif<CR>

"右下角显示光标位置的状态行
"set ruler
""set rulerformat=%15(%c%V\ %p%%%)
"搜索时全小写则不区分大小写，只要有一个字符大写则区分大小写
set ignorecase smartcase
"禁止自动折叠代码
set foldlevel=100
"搜索到文件两端时不重新搜索
set nowrapscan
"开启状态栏信息
""set laststatus=2
"增强模式中的命令行自动完成操作
set wildmenu
"打开文件自动跳转到上次编辑的行
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
"突出显示当前行/列
set cursorline
set cursorcolumn
"gvim英文字体设置(set guifont=字体名,有空格用\隔开：h字体大小)
"如果哟只设置set guifont=***则中英文一个字体
"set guifont=YaHei\ Consolas\ Hybrid:h14
set guifont=Consolas:h13.5
"set guifont=Bitstream\ Vera\ Sans\ Mono:h17:cANSI
"gvim中文字体设置
"set guifontwide=Yahei\ Consolas\ Hybrid:h12
set guifontwide=Consolas:h12
"语法高亮
syntax enable
syntax on
"高亮显示匹配的括号
set showmatch
"匹配括号高亮的时间（单位是十分之一秒）
set matchtime=3
"配色方案
colo desert
"最多的标签个数
set tabpagemax=15
"2个标签一下也显示标签
set showtabline=2
"":tabnew	新建标签页
"":tabs	显示已打开标签页的列表
"":tabc	关闭当前标签页
"":tabn	移动到下一个标签页
"":tabp	移动到上一个标签页
"":tabfirst	移动到第一个标签页
"":tablast	移动到最后一个标签页

"状态栏显示目前所执行的指令
set showcmd
" =============
" Key Shortcut
" =============
nmap <C-t>   :tabnew<cr>
nmap <C-p>   :tabprevious<cr>
nmap <C-n>   :tabnext<cr>
"没有设置为Ctrl+w是因为多窗口移动时冲突"
nmap <C-k>   :tabclose<cr>

"=======================================================
"function
"=======================================================
" 获取当前目录
func! GetPWD()
    return substitute(getcwd(), "", "", "g")
endf

"自动改变当前目录
if has('netbeans_intg')
    set autochdir
endif

"自动匹配
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {}<ESC>i
inoremap ' ''<ESC>i
inoremap " ""<ESC>i

" =========================================================
" Plugin Mananger
" =========================================================
"高亮当前行
"快捷键<F4>
"设置为自动启动
let g:indent_guides_enable_on_vim_startup = 0
"对齐线宽度
let g:indent_guides_guide_size=1

"按<F4>键可以在任何一列上显示对其线
"简化了set cc=80
map <F4> :call SetColorColumn()<CR>
function! SetColorColumn()
    let col_num = virtcol(".")
    let cc_list = split(&cc, ',')
    if count(cc_list, string(col_num)) <= 0
        execute "set cc+=".col_num
    else
        execute "set cc-=".col_num
    endif
endfunction


